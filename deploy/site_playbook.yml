---
- name: Load multiple .env files
  hosts: localhost
  connection: local
  gather_facts: false
  run_once: true
  tags: always
  vars:
    env_name: "{{ ansible_limit | default('testing') }}"
    env_files:
      - ".env.{{ env_name }}"
      - "{{ playbook_dir }}/../rewardsweb/.env.{{ env_name }}"
      - "{{ playbook_dir }}/../rewardsweb/rewardsbot/.env"
  tasks:
    - name: Verify env files exist (ignore missing optional ones)
      ansible.legacy.stat:
        path: "{{ item }}"
      loop: "{{ env_files }}"
      register: env_file_check

    - name: Load variables from all existing .env files
      ansible.builtin.set_fact:
        env_vars: "{{ env_vars | default({}) | combine(parsed_env, recursive=True) }}"
      vars:
        parsed_env: >-
          {{
            dict(
              lookup('file', item.item)
              .splitlines()
              | reject('match', '^#')
              | reject('match', '^$')
              | map('regex_replace', '^[ \t]*', '')
              | map('regex_replace', '[ \t]*$', '')
              | map('split', '=', 1)
            )
          }}
      loop: "{{ env_file_check.results }}"
      when: item.stat.exists

    - name: Export env_vars globally via add_host  # noqa run-once[task]
      ansible.builtin.add_host:
        name: "{{ item }}"
        global_env_vars: "{{ env_vars }}"
      loop: "{{ groups['all'] }}"
      delegate_to: localhost
      run_once: true
      failed_when: false
      changed_when: false
      tags: always

- name: Check if admin_user can connect
  hosts: all
  gather_facts: false
  vars:
    ansible_user: "{{ admin_user }}"
  tasks:
    - name: Try connecting as admin_user
      ansible.builtin.ping:
      register: admin_user_ping
      ignore_unreachable: true
      ignore_errors: true
      changed_when: false

    - name: Set fallback user if admin_user unreachable
      ansible.builtin.set_fact:
        ansible_user: "{{ superuser | default('root') }}"
      when: admin_user_ping.unreachable is defined

- name: Create admin_user if missing
  hosts: all
  remote_user: "{{ superuser | default('root') }}"
  tasks:
    - name: Include createuser role
      ansible.builtin.include_role:
        name: createuser
      when: admin_user_ping.unreachable is defined

- name: Provisioning of rewardsweb project
  hosts: all
  remote_user: "{{ admin_user }}"
  roles:
    - role: setuphost
    - role: redis
    - role: postgresql
    - role: projectsetup
    - role: gunicorn
    - role: nginx
    - role: hardening
