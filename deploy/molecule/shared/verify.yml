---
- name: Verify CI environment
  hosts: all:!localhost
  become: true
  gather_facts: false

  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Check user exists
      ansible.builtin.getent:
        database: passwd
        key: "{{ admin_user }}"

    - name: Verify admin user user exists (created by createuser role)
      ansible.builtin.command: "id {{ admin_user }}"
      register: admin_user_check
      changed_when: false
      failed_when: admin_user_check.rc != 0

    - name: Assert that the Redis service is running and enabled
      ansible.builtin.assert:
        that:
          - "ansible_facts.services['redis-server.service'].state == 'running'"
          - "ansible_facts.services['redis-server.service'].status == 'enabled'"
        fail_msg: "Redis service is not running or not enabled"
        success_msg: "Redis service is running and enabled"

    - name: Verify PostgreSQL user exists
      ansible.builtin.command: >
        psql -U postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='{{ database_user }}'"
      register: user_exists
      changed_when: false
      failed_when: user_exists.stdout.strip() != "1"

    - name: Verify PostgreSQL database exists
      ansible.builtin.command: >
        psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='{{ database_name }}'"
      register: db_exists
      changed_when: false
      failed_when: db_exists.stdout.strip() != "1"

    - name: Verify pg_trgm extension enabled
      ansible.builtin.command: >
        psql -U postgres -d {{ database_name }} -tAc "SELECT 1 FROM pg_extension WHERE extname='pg_trgm'"
      register: ext_exists
      changed_when: false
      failed_when: ext_exists.stdout.strip() != "1"

    - name: Verify core_reward table has more than 5 records
      ansible.builtin.command: >
        psql -U postgres -d {{ database_name }}
        -tAc "SELECT COUNT(*) FROM core_reward;"
      register: reward_count
      changed_when: false
      failed_when: reward_count.stdout | int <= 5

    - name: Verify core_reward table has more than 5 records
      ansible.builtin.command: >
        psql -U postgres -d {{ database_name }}
        -tAc "SELECT COUNT(*) FROM core_reward;"
      register: reward_count
      changed_when: false
      failed_when: reward_count.stdout | int <= 5

    - name: Verify Gunicorn service file exists
      ansible.builtin.stat:
        path: /etc/systemd/system/gunicorn-testing_rewardsweb.service
      register: gunicorn_file

    - name: Assert Gunicorn systemd unit present
      ansible.builtin.assert:
        that:
          - gunicorn_file.stat.exists
        fail_msg: "Gunicorn service file not found at /etc/systemd/system/gunicorn-testing_rewardsweb.service"
        success_msg: "Gunicorn service file found âœ…"

    - name: Fetch root page from nginx
      ansible.builtin.uri:
        url: "http://localhost/"
        return_content: true
      register: verify_nginx_root
      changed_when: false

    - name: Ensure root page responded with HTML
      ansible.builtin.assert:
        that:
          - "'<html' in verify_nginx_root.content.lower()"
        fail_msg: "Nginx did not return an HTML page."
        success_msg: "Nginx served the root page."

    - name: Extract contribs-count from HTML
      ansible.builtin.set_fact:
        verify_contribs_count_raw: "{{ (verify_nginx_root.content | regex_search('<span id=\"contribs-count\">(.*?)</span>', '\\1'))[0] }}"

    - name: Normalize contribs-count (remove comma separators)
      ansible.builtin.set_fact:
        verify_contribs_count: "{{ verify_contribs_count_raw | replace(',', '') | trim }}"

    - name: Verify contribs-count is greater than 0
      ansible.builtin.assert:
        that:
          - verify_contribs_count | float > 0
        fail_msg: "contribs-count <= 0 (page did not render contributions count correctly)"
        success_msg: "contribs-count is greater than 0 ({{ verify_contribs_count }})"
