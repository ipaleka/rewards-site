---
- name: Verify CI environment
  hosts: all:!localhost
  become: true
  gather_facts: false

  tasks:
    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Check user exists
      ansible.builtin.getent:
        database: passwd
        key: "{{ admin_user }}"

    - name: Verify admin user user exists (created by createuser role)
      ansible.builtin.command: "id {{ admin_user }}"
      register: admin_user_check
      changed_when: false
      failed_when: admin_user_check.rc != 0

    - name: Assert that the Redis service is running and enabled
      ansible.builtin.assert:
        that:
          - "ansible_facts.services['redis-server.service'].state == 'running'"
          - "ansible_facts.services['redis-server.service'].status == 'enabled'"
        fail_msg: "Redis service is not running or not enabled"
        success_msg: "Redis service is running and enabled"

    - name: Verify PostgreSQL user exists
      ansible.builtin.command: "psql -U postgres -tAc \"SELECT 1 FROM pg_roles WHERE rolname='{{ hostvars['localhost'].env_vars.DATABASE_USER }}'\""
      register: user_exists
      changed_when: false
      failed_when: user_exists.stdout.strip() != "1"

    - name: Verify PostgreSQL database exists
      ansible.builtin.command: "psql -U postgres -tAc \"SELECT 1 FROM pg_database WHERE datname='{{ hostvars['localhost'].env_vars.DATABASE_NAME }}'\""
      register: db_exists
      changed_when: false
      failed_when: db_exists.stdout.strip() != "1"

    - name: Verify pg_trgm extension enabled
      ansible.builtin.command: >
        psql -U postgres -d {{ hostvars['localhost'].env_vars.DATABASE_NAME }}
        -tAc "SELECT 1 FROM pg_extension WHERE extname='pg_trgm'"
      register: ext_exists
      changed_when: false
      failed_when: ext_exists.stdout.strip() != "1"

    - name: Verify Gunicorn service file exists
      ansible.builtin.stat:
        path: /etc/systemd/system/gunicorn.service
      register: gunicorn_file

    - name: Assert Gunicorn systemd unit present
      ansible.builtin.assert:
        that:
          - gunicorn_file.stat.exists
        fail_msg: "Gunicorn service file not found at /etc/systemd/system/gunicorn.service"
        success_msg: "Gunicorn service file found âœ…"
