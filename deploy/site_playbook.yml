---
# ──────────────────────────────────────────────
# PLAY 1: Load .env variables (always executed)
# ──────────────────────────────────────────────
- name: Load environment from .env files
  hosts: all
  connection: local
  gather_facts: false
  run_once: true
  any_errors_fatal: true
  tags: always
  vars:
    env_name: "{{ ansible_limit | default('testing') }}"
    env_files:
      - ".env.{{ env_name }}"
      - "{{ playbook_dir }}/../rewardsweb/.env.{{ env_name }}"
      - "{{ playbook_dir }}/../rewardsweb/rewardsbot/.env"

  tasks:
    - name: Verify env files exist (ignore missing optional ones)
      ansible.legacy.stat:
        path: "{{ item }}"
      loop: "{{ env_files }}"
      register: env_file_check

    - name: Verify env files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ env_files }}"
      register: env_file_check

    - name: Read contents of .env files
      ansible.builtin.slurp:
        path: "{{ item.item }}"
      loop: "{{ env_file_check.results }}"
      when: item.stat.exists
      register: env_slurped

    - name: Convert .env to dict
      ansible.builtin.set_fact:
        env_vars: "{{ env_vars | default({}) | combine(parsed_one, recursive=True) }}"
      vars:
        decoded: "{{ item.content | b64decode }}"
        yaml_style: |
          {% for line in decoded.splitlines() %}
          {%   if line.strip() and not line.strip().startswith('#') %}
          {%     set parts = line.split('=', 1) %}
          {{ parts[0] }}: {{ parts[1] | default('') | to_json }}
          {%   endif %}
          {% endfor %}
        parsed_one: "{{ yaml_style | from_yaml }}"
      loop: "{{ env_slurped.results }}"

    - name: Export env_vars to localhost hostvars
      ansible.builtin.add_host:
        name: localhost
        env_vars: "{{ env_vars }}"
      delegate_to: localhost
      changed_when: false

# ──────────────────────────────────────────────
# PLAY 2: Determine SSH user (always executed)
# ──────────────────────────────────────────────
- name: Decide SSH connection user
  hosts: "{{ ansible_limit | default('all') }}"
  gather_facts: false
  tags: always
  tasks:
    - name: Set connection user from env_vars
      ansible.builtin.set_fact:
        ansible_user: "{{ hostvars['localhost'].env_vars.ADMIN_USER }}"

    - name: Try connecting as admin_user
      ansible.builtin.ping:
      register: admin_user_ping
      ignore_unreachable: true
      ignore_errors: true
      changed_when: false

    - name: Set fallback user if admin_user unreachable
      ansible.builtin.set_fact:
        ansible_user: "{{ superuser | default('root') }}"
      when: admin_user_ping.unreachable is defined

# ────────────────────────────────────────
# PLAY 3: Bootstrap admin user (if needed)
# ────────────────────────────────────────
- name: Create admin_user if missing
  hosts: all
  remote_user: "{{ superuser | default('root') }}"
  tasks:
    - name: Include createuser role
      ansible.builtin.include_role:
        name: createuser
      when: admin_user_ping.unreachable is defined

# ──────────────────────────────────────────────
# PLAY 4: Provision host (roles)
# ──────────────────────────────────────────────
- name: Provisioning of rewardsweb project
  hosts: all
  vars:
    ansible_user: "{{ hostvars['localhost'].env_vars.ADMIN_USER }}"  
  roles:
    - role: setuphost
    - role: redis
    - role: postgresql
    - role: projectsetup
    - role: gunicorn
    - role: nginx
    - role: hardening
