- name: Load multiple .env files
  vars:
    env_files:
      - "{{ env_file }}"
      - "{{ shared_env_file }}"
      - "{{ bot_env_file }}"
  block:
    - name: Validate env files exist
      ansible.builtin.stat:
        path: "{{ item }}"
      loop: "{{ env_files }}"
      register: env_files_check

    - name: Fail if any env file is missing
      ansible.builtin.fail:
        msg: "Environment file {{ item.item }} not found!"
      loop: "{{ env_files_check.results }}"
      when: not item.stat.exists

    - name: Merge all environment files
      ansible.builtin.set_fact:
        env_vars: "{{ env_vars | default({}) | combine(parsed_env) }}"
      vars:
        parsed_env: >-
          {{
            dict(lookup('file', item)
            .splitlines()
            | reject('match', '^#')
            | reject('match', '^$')
            | map('split', '=', 1))
          }}
      loop: "{{ env_files }}"
- name: Check if admin_user can connect
  hosts: all
  gather_facts: false
  vars:
    ansible_user: "{{ admin_user }}"
  tasks:
    - name: Try connecting as admin_user
      ansible.builtin.ping:
      register: admin_user_ping
      ignore_unreachable: true
      ignore_errors: true
      changed_when: false

    - name: Set fallback user if admin_user unreachable
      ansible.builtin.set_fact:
        ansible_user: "{{ superuser | default('root') }}"
      when: admin_user_ping.unreachable is defined

- name: Create admin_user if missing
  hosts: all
  remote_user: "{{ superuser | default('root') }}"
  tasks:
    - name: Include createuser role
      include_role:
        name: createuser
      when: admin_user_ping.unreachable is defined

- name: "Provisioning of {{ project_name }} project"
  hosts: all
  remote_user: "{{ admin_user }}"
  roles:
    - role: setuphost
    - role: redis
    - role: postgresql
    - role: projectsetup
    - role: gunicorn
    - role: nginx
    - role: hardening
