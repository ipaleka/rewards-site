---
- name: Define env_name from limit or default to testing
  ansible.builtin.set_fact:
    env_name: "{{ ansible_limit | default('testing') }}"

- name: Define list of .env files to load
  ansible.builtin.set_fact:
    env_files:
      - "{{ playbook_dir }}/../../.env.{{ env_name }}"
      - "{{ playbook_dir }}/../../../rewardsweb/.env.{{ env_name }}"
      - "{{ playbook_dir }}/../../../rewardsweb/rewardsbot/.env"

- name: Verify env files exist (ignore missing optional ones)
  ansible.legacy.stat:
    path: "{{ item }}"
  loop: "{{ env_files }}"
  register: env_file_check

- name: Verify env files exist
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ env_files }}"
  register: env_file_check

- name: Read contents of .env files
  ansible.builtin.slurp:
    path: "{{ item.item }}"
  loop: "{{ env_file_check.results }}"
  when: item.stat.exists
  register: env_slurped

- name: Convert .env to dict safely (supports quotes and # comments)
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars | default({}) | combine(parsed_one, recursive=True) }}"
  vars:
    decoded: "{{ item.content | b64decode }}"
    yaml_style: |
      {% for line in decoded.splitlines() %}
      {%   if line.strip() and not line.strip().startswith('#') %}
      {%     set parts = line.split('=', 1) %}
      {{ parts[0] }}: {{ parts[1] | default('') | to_json }}
      {%   endif %}
      {% endfor %}
    parsed_one: "{{ yaml_style | from_yaml }}"
  loop: "{{ env_slurped.results }}"
